# Bun-First Development Guidelines

## Core Principle

**ALWAYS default to using Bun instead of Node.js, npm, pnpm, yarn, or vite for all development tasks.**

## Command Replacements

### Runtime & Execution

- **File execution**: `bun <file>` instead of `node <file>` or `ts-node <file>`
- **Testing**: `bun test` instead of `jest`, `vitest`, or other test runners
- **Building**: `bun build <file.html|file.ts|file.css>` instead of `webpack`, `esbuild`, or `vite`

### Package Management

- **Installation**: `bun install` instead of `npm install`, `yarn install`, or `pnpm install`
- **Script execution**: `bun run <script>` instead of `npm run <script>`, `yarn run <script>`, or `pnpm run <script>`
- **Environment variables**: Bun automatically loads `.env` files, so don't use `dotenv` package

## Built-in APIs & Alternatives

### Web Server & HTTP

- **HTTP Server**: Use `Bun.serve()` instead of `express` or other web frameworks
  - Supports WebSockets, HTTPS, and routing out of the box
  - Built-in HMR and development features

### Database & Storage

- **SQLite**: Use `bun:sqlite` instead of `better-sqlite3`
- **Redis**: Use `Bun.redis` instead of `ioredis`
- **PostgreSQL**: Use `Bun.sql` instead of `pg` or `postgres.js`

### File System & System Operations

- **File operations**: Prefer `Bun.file` over `node:fs`'s `readFile`/`writeFile`
- **Shell commands**: Use `Bun.$` for shell operations instead of `execa`
- **WebSockets**: Built-in `WebSocket` support, don't use `ws` package

## Example: Bun.serve() Implementation

```typescript
Bun.serve({
  routes: {
    "/": index,
    "/api/users/:id": {
      GET: (req) => {
        return new Response(JSON.stringify({ id: req.params.id }));
      },
    },
  },
  // Built-in WebSocket support
  websocket: {
    open: (ws) => {
      ws.send("Hello, world!");
    },
    message: (ws, message) => {
      ws.send(message);
    },
    close: (ws) => {
      // Handle connection close
    },
  },
  development: {
    hmr: true, // Hot Module Replacement
    console: true, // Enhanced console logging
  },
});
```

## Migration Checklist

When converting from Node.js/npm to Bun:

1. ✅ Replace `node` commands with `bun`
2. ✅ Replace `npm install` with `bun install`
3. ✅ Replace `npm run` with `bun run`
4. ✅ Replace `jest`/`vitest` with `bun test`
5. ✅ Replace `webpack`/`vite` with `bun build`
6. ✅ Remove `dotenv` dependency
7. ✅ Replace `express` with `Bun.serve()`
8. ✅ Replace database drivers with Bun equivalents
9. ✅ Replace `ws` with built-in `WebSocket`
10. ✅ Replace `execa` with `Bun.$`

## Additional Resources

- **API Documentation**: Check `node_modules/bun-types/docs/**.md` for comprehensive Bun API reference
- **Performance**: Bun provides subsecond startup times and faster package installation
- **Compatibility**: Bun maintains Node.js compatibility while offering enhanced performance

})

```

For more information, read the Bun API docs in `node_modules/bun-types/docs/**.md`.
```
